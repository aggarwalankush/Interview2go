<font color="#0000aa">package</font> XBonus;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Given&nbsp;&nbsp;a&nbsp;&nbsp;2-d&nbsp;&nbsp;grid&nbsp;&nbsp;map&nbsp;&nbsp;of&nbsp;&nbsp;&#39;1&#39;s&nbsp;&nbsp;(land)&nbsp;&nbsp;and&nbsp;&nbsp;&#39;0&#39;s&nbsp;&nbsp;(water),&nbsp;&nbsp;count&nbsp;&nbsp;the&nbsp;&nbsp;number&nbsp;&nbsp;of&nbsp;&nbsp;islands.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;An&nbsp;&nbsp;island&nbsp;&nbsp;is&nbsp;&nbsp;surrounded&nbsp;&nbsp;by&nbsp;&nbsp;water&nbsp;&nbsp;and&nbsp;&nbsp;is&nbsp;&nbsp;formed&nbsp;&nbsp;by&nbsp;&nbsp;connecting&nbsp;&nbsp;adjacent&nbsp;&nbsp;lands&nbsp;&nbsp;horizontally&nbsp;&nbsp;or&nbsp;&nbsp;vertically.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;You&nbsp;&nbsp;may&nbsp;&nbsp;assume&nbsp;&nbsp;all&nbsp;&nbsp;four&nbsp;&nbsp;edges&nbsp;&nbsp;of&nbsp;&nbsp;the&nbsp;&nbsp;grid&nbsp;&nbsp;are&nbsp;&nbsp;all&nbsp;&nbsp;surrounded&nbsp;&nbsp;by&nbsp;&nbsp;water.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">CountIslands</font> {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">char</font>[][] grid = {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;0&#39;</font>},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;0&#39;</font>, <font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;0&#39;</font>},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;0&#39;</font>, <font color="#aa5500">&#39;0&#39;</font>, <font color="#aa5500">&#39;0&#39;</font>},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#aa5500">&#39;0&#39;</font>, <font color="#aa5500">&#39;0&#39;</font>, <font color="#aa5500">&#39;0&#39;</font>, <font color="#aa5500">&#39;1&#39;</font>, <font color="#aa5500">&#39;0&#39;</font>},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Number of Islands : &quot;</font> + numIslands(grid));<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">int</font> <font color="#00aa00">numIslands</font>(<font color="#00aaaa">char</font>[][] grid) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (grid == <font color="#0000aa">null</font> || grid.<font color="#1e90ff">length</font> == <font color="#009999">0</font> || grid[<font color="#009999">0</font>].<font color="#1e90ff">length</font> == <font color="#009999">0</font>) <font color="#0000aa">return</font> <font color="#009999">0</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> count = <font color="#009999">0</font>;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">for</font> (<font color="#00aaaa">int</font> i = <font color="#009999">0</font>; i &lt; grid.<font color="#1e90ff">length</font>; i++) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">for</font> (<font color="#00aaaa">int</font> j = <font color="#009999">0</font>; j &lt; grid[<font color="#009999">0</font>].<font color="#1e90ff">length</font>; j++) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (grid[i][j] == <font color="#aa5500">&#39;1&#39;</font>) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge(grid, i, j);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> count;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">merge</font>(<font color="#00aaaa">char</font>[][] grid, <font color="#00aaaa">int</font> i, <font color="#00aaaa">int</font> j) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#aaaaaa; font-style: italic">//validity&nbsp;&nbsp;checking</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (i &lt; <font color="#009999">0</font> || j &lt; <font color="#009999">0</font> || i &gt; grid.<font color="#1e90ff">length</font> - <font color="#009999">1</font> || j &gt; grid[<font color="#009999">0</font>].<font color="#1e90ff">length</font> - <font color="#009999">1</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font>;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#aaaaaa; font-style: italic">//if&nbsp;&nbsp;current&nbsp;&nbsp;cell&nbsp;&nbsp;is&nbsp;&nbsp;water&nbsp;&nbsp;or&nbsp;&nbsp;visited</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (grid[i][j] != <font color="#aa5500">&#39;1&#39;</font>) <font color="#0000aa">return</font>;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#aaaaaa; font-style: italic">//set&nbsp;&nbsp;visited&nbsp;&nbsp;cell&nbsp;&nbsp;to&nbsp;&nbsp;&#39;0&#39;</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid[i][j] = <font color="#aa5500">&#39;0&#39;</font>;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#aaaaaa; font-style: italic">//merge&nbsp;&nbsp;all&nbsp;&nbsp;adjacent&nbsp;&nbsp;land</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge(grid, i - <font color="#009999">1</font>, j);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge(grid, i + <font color="#009999">1</font>, j);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge(grid, i, j - <font color="#009999">1</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge(grid, i, j + <font color="#009999">1</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/>