<font color="#0000aa">package</font> LinkedLists;<br/><br/><font color="#0000aa">import</font> <font color="#00aaaa; text-decoration: underline">java.util.HashSet</font>;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Remove&nbsp;&nbsp;duplicates&nbsp;&nbsp;from&nbsp;&nbsp;an&nbsp;&nbsp;unsorted&nbsp;&nbsp;linked&nbsp;&nbsp;list</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">DuplicateRemove</font> {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;Integer&gt; linkedList = <font color="#0000aa">new</font> Node&lt;&gt;(<font color="#009999">10</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkedList.<font color="#1e90ff">append</font>(<font color="#009999">9</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkedList.<font color="#1e90ff">append</font>(<font color="#009999">10</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkedList.<font color="#1e90ff">append</font>(<font color="#009999">4</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkedList.<font color="#1e90ff">append</font>(<font color="#009999">7</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Input LinkedList1: &quot;</font> + linkedList);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeDup1(linkedList);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;After Removing Duplicates: &quot;</font> + linkedList);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkedList.<font color="#1e90ff">append</font>(<font color="#009999">10</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Input LinkedList2: &quot;</font> + linkedList);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeDup2(linkedList);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;After Removing Duplicates: &quot;</font> + linkedList);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;Time&nbsp;&nbsp;Complexity:&nbsp;&nbsp;O(n)</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">removeDup1</font>(Node&lt;Integer&gt; n) {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (n == <font color="#0000aa">null</font> || n.<font color="#1e90ff">next</font> == <font color="#0000aa">null</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HashSet&lt;Integer&gt; set = <font color="#0000aa">new</font> HashSet&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">while</font> (n.<font color="#1e90ff">next</font> != <font color="#0000aa">null</font>) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set.<font color="#1e90ff">add</font>(n.<font color="#1e90ff">data</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (set.<font color="#1e90ff">contains</font>(n.<font color="#1e90ff">next</font>.<font color="#1e90ff">data</font>))<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n.<font color="#1e90ff">next</font> = n.<font color="#1e90ff">next</font>.<font color="#1e90ff">next</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">else</font> {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n = n.<font color="#1e90ff">next</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;Time&nbsp;&nbsp;Complexity:&nbsp;&nbsp;O(N*N)</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;Space&nbsp;&nbsp;Complexity:&nbsp;&nbsp;O(1)</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">removeDup2</font>(Node&lt;Integer&gt; n) {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (n == <font color="#0000aa">null</font> || n.<font color="#1e90ff">next</font> == <font color="#0000aa">null</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">while</font> (n != <font color="#0000aa">null</font>) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;Integer&gt; runner = n;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">while</font> (runner.<font color="#1e90ff">next</font> != <font color="#0000aa">null</font>) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (runner.<font color="#1e90ff">next</font>.<font color="#1e90ff">data</font>.<font color="#1e90ff">equals</font>(n.<font color="#1e90ff">data</font>))<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runner.<font color="#1e90ff">next</font> = runner.<font color="#1e90ff">next</font>.<font color="#1e90ff">next</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">else</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runner = runner.<font color="#1e90ff">next</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n = n.<font color="#1e90ff">next</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>}<br/>