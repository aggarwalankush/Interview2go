<font color="#0000aa">package</font> BitwiseAndMath;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Given&nbsp;&nbsp;two&nbsp;&nbsp;32-bit&nbsp;&nbsp;numbers,A&nbsp;&nbsp;and&nbsp;&nbsp;B,&nbsp;&nbsp;and&nbsp;&nbsp;two&nbsp;&nbsp;bit&nbsp;&nbsp;positions,&nbsp;&nbsp;i&nbsp;&nbsp;and&nbsp;&nbsp;j.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Write&nbsp;&nbsp;a&nbsp;&nbsp;method&nbsp;&nbsp;to&nbsp;&nbsp;insert&nbsp;&nbsp;A&nbsp;&nbsp;into&nbsp;&nbsp;B&nbsp;&nbsp;such&nbsp;&nbsp;that&nbsp;&nbsp;A&nbsp;&nbsp;starts&nbsp;&nbsp;at&nbsp;&nbsp;bit&nbsp;&nbsp;j&nbsp;&nbsp;and&nbsp;&nbsp;ends&nbsp;&nbsp;at&nbsp;&nbsp;bit&nbsp;&nbsp;i.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">InsertAIntoB</font> {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> A = Integer.<font color="#1e90ff">parseInt</font>(<font color="#aa5500">&quot;1101&quot;</font>, <font color="#009999">2</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> B = Integer.<font color="#1e90ff">parseInt</font>(<font color="#aa5500">&quot;1000000&quot;</font>, <font color="#009999">2</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> i = <font color="#009999">1</font>, j = <font color="#009999">4</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;A: &quot;</font> + Integer.<font color="#1e90ff">toBinaryString</font>(A));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;B: &quot;</font> + Integer.<font color="#1e90ff">toBinaryString</font>(B));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Insertion Index: (&quot;</font> + j + <font color="#aa5500">&quot;, &quot;</font> + i + <font color="#aa5500">&quot;)&quot;</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Inserted A into B: &quot;</font> + insert(A, B, j, i));<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> String <font color="#00aa00">insert</font>(<font color="#00aaaa">int</font> A, <font color="#00aaaa">int</font> B, <font color="#00aaaa">int</font> j, <font color="#00aaaa">int</font> i) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> allOnes = ~<font color="#009999">0</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> leftMask = allOnes &lt;&lt; (j + <font color="#009999">1</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> rightMask = (<font color="#009999">1</font> &lt;&lt; i) - <font color="#009999">1</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> mask = leftMask | rightMask;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> clearedB = B &amp; mask;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> shiftedA = A &lt;&lt; i;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> result = clearedB | shiftedA;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> Integer.<font color="#1e90ff">toBinaryString</font>(result);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>}<br/>