<font color="#0000aa">package</font> Arrays;<br/><br/><font color="#0000aa">import</font> <font color="#00aaaa; text-decoration: underline">java.util.Arrays</font>;<br/><font color="#0000aa">import</font> <font color="#00aaaa; text-decoration: underline">java.util.Stack</font>;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Find&nbsp;&nbsp;the&nbsp;&nbsp;largest&nbsp;&nbsp;rectangular&nbsp;&nbsp;area&nbsp;&nbsp;possible&nbsp;&nbsp;in&nbsp;&nbsp;a&nbsp;&nbsp;given&nbsp;&nbsp;histogram</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Rectangle&nbsp;&nbsp;can&nbsp;&nbsp;only&nbsp;&nbsp;be&nbsp;&nbsp;made&nbsp;&nbsp;of&nbsp;&nbsp;contiguous&nbsp;&nbsp;bars</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Assumptions:&nbsp;&nbsp;All&nbsp;&nbsp;bars&nbsp;&nbsp;are&nbsp;&nbsp;of&nbsp;&nbsp;width&nbsp;&nbsp;1</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">MaxHistogramArea</font> {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font>[] height = {<font color="#009999">10</font>, <font color="#009999">9</font>, <font color="#009999">5</font>, <font color="#009999">6</font>, <font color="#009999">8</font>, <font color="#009999">11</font>, <font color="#009999">10</font>};<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Input Array: &quot;</font> + Arrays.<font color="#1e90ff">toString</font>(height));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Max Difference: &quot;</font> + findMaxHistogramArea(height));<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;Time&nbsp;&nbsp;Complexity:&nbsp;&nbsp;O(n)</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">int</font> <font color="#00aa00">findMaxHistogramArea</font>(<font color="#00aaaa">int</font>[] height) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (height == <font color="#0000aa">null</font> || height.<font color="#1e90ff">length</font> == <font color="#009999">0</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#009999">0</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stack&lt;Integer&gt; stack = <font color="#0000aa">new</font> Stack&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> maxArea = Integer.<font color="#1e90ff">MIN_VALUE</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> i = <font color="#009999">0</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">while</font> (i &lt; height.<font color="#1e90ff">length</font>) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (stack.<font color="#1e90ff">isEmpty</font>() || height[i] &gt;= height[stack.<font color="#1e90ff">peek</font>()])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack.<font color="#1e90ff">push</font>(i++);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">else</font> {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> hyt = height[stack.<font color="#1e90ff">pop</font>()];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> width = stack.<font color="#1e90ff">isEmpty</font>() ? i : i - stack.<font color="#1e90ff">peek</font>() - <font color="#009999">1</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxArea = Math.<font color="#1e90ff">max</font>(maxArea, hyt * width);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">while</font> (!stack.<font color="#1e90ff">isEmpty</font>()) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> hyt = height[stack.<font color="#1e90ff">pop</font>()];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> width = stack.<font color="#1e90ff">isEmpty</font>() ? i : i - stack.<font color="#1e90ff">peek</font>() - <font color="#009999">1</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxArea = Math.<font color="#1e90ff">max</font>(maxArea, hyt * width);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> maxArea;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/><br/>}<br/>