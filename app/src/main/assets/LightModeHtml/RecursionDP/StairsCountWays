<font color="#0000aa">package</font> RecursionDP;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Count&nbsp;&nbsp;the&nbsp;&nbsp;possible&nbsp;&nbsp;number&nbsp;&nbsp;of&nbsp;&nbsp;ways&nbsp;&nbsp;to&nbsp;&nbsp;climb&nbsp;&nbsp;N&nbsp;&nbsp;stairs.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Given&nbsp;&nbsp;you&nbsp;&nbsp;can&nbsp;&nbsp;hop&nbsp;&nbsp;either&nbsp;&nbsp;1,&nbsp;&nbsp;2&nbsp;&nbsp;or&nbsp;&nbsp;3&nbsp;&nbsp;steps&nbsp;&nbsp;at&nbsp;&nbsp;a&nbsp;&nbsp;time.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">StairsCountWays</font> {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font>[] possibleWays = <font color="#0000aa">new</font> <font color="#00aaaa">int</font>[<font color="#009999">30</font>];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Possible ways to climb &quot;</font> + <font color="#009999">2</font> + <font color="#aa5500">&quot; stairs: &quot;</font> + countWays(<font color="#009999">3</font>, possibleWays));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Possible ways to climb &quot;</font> + <font color="#009999">5</font> + <font color="#aa5500">&quot; stairs: &quot;</font> + countWays(<font color="#009999">5</font>, possibleWays));<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">int</font> <font color="#00aa00">countWays</font>(<font color="#00aaaa">int</font> n, <font color="#00aaaa">int</font>[] possibleWays) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (n &lt; <font color="#009999">0</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#009999">0</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (n == <font color="#009999">0</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#009999">1</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (possibleWays[n] != <font color="#009999">0</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> possibleWays[n];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possibleWays[n] = countWays(n - <font color="#009999">1</font>, possibleWays) + countWays(n - <font color="#009999">2</font>, possibleWays) + countWays(n - <font color="#009999">3</font>, possibleWays);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> possibleWays[n];<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/>