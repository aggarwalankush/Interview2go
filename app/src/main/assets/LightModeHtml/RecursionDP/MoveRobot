<font color="#0000aa">package</font> RecursionDP;<br/><br/><font color="#0000aa">import</font> <font color="#00aaaa; text-decoration: underline">java.util.ArrayList</font>;<br/><font color="#0000aa">import</font> <font color="#00aaaa; text-decoration: underline">java.util.Arrays</font>;<br/><font color="#0000aa">import</font> <font color="#00aaaa; text-decoration: underline">java.util.HashMap</font>;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Imagine&nbsp;&nbsp;a&nbsp;&nbsp;robot&nbsp;&nbsp;sitting&nbsp;&nbsp;on&nbsp;&nbsp;the&nbsp;&nbsp;upper&nbsp;&nbsp;left&nbsp;&nbsp;corner&nbsp;&nbsp;of&nbsp;&nbsp;an&nbsp;&nbsp;X&nbsp;&nbsp;by&nbsp;&nbsp;Y&nbsp;&nbsp;grid.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Find&nbsp;&nbsp;the&nbsp;&nbsp;path&nbsp;&nbsp;of&nbsp;&nbsp;robot&nbsp;&nbsp;to&nbsp;&nbsp;go&nbsp;&nbsp;from&nbsp;&nbsp;(0,&nbsp;&nbsp;0)&nbsp;&nbsp;to&nbsp;&nbsp;(X,&nbsp;&nbsp;Y)</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Assumption:</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;1.&nbsp;&nbsp;Robot&nbsp;&nbsp;can&nbsp;&nbsp;either&nbsp;&nbsp;move&nbsp;&nbsp;Right&nbsp;&nbsp;or&nbsp;&nbsp;Down</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;2.&nbsp;&nbsp;Robot&nbsp;&nbsp;can&#39;t&nbsp;&nbsp;step&nbsp;&nbsp;on&nbsp;&nbsp;certain&nbsp;&nbsp;spots</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">MoveRobot</font> {<br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">static</font> <font color="#00aaaa">int</font>[][] maze = {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#009999">0</font>, <font color="#009999">0</font>, <font color="#009999">1</font>, <font color="#009999">1</font>},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#009999">0</font>, <font color="#009999">0</font>, <font color="#009999">0</font>, <font color="#009999">0</font>},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#009999">1</font>, <font color="#009999">0</font>, <font color="#009999">1</font>, <font color="#009999">0</font>},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#009999">0</font>, <font color="#009999">0</font>, <font color="#009999">0</font>, <font color="#009999">0</font>}<br/>&nbsp;&nbsp;&nbsp;&nbsp;};<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;Point&gt; path = <font color="#0000aa">new</font> ArrayList&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HashMap&lt;Point, Boolean&gt; buffer = <font color="#0000aa">new</font> HashMap&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Input Maze:&quot;</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printMatrix(maze);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">boolean</font> pathExists = getPathDP(<font color="#009999">3</font>, <font color="#009999">3</font>, path, buffer);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (pathExists)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Robot Path: &quot;</font> + path);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">else</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;No possible path found&quot;</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">boolean</font> <font color="#00aa00">getPathRecursion</font>(<font color="#00aaaa">int</font> x, <font color="#00aaaa">int</font> y, ArrayList&lt;Point&gt; path) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (x &lt; <font color="#009999">0</font> || y &lt; <font color="#009999">0</font> || !isFree(x, y))<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#0000aa">false</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">boolean</font> reachedOrigin = (x == <font color="#009999">0</font> &amp;&amp; y == <font color="#009999">0</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (reachedOrigin || getPathRecursion(x - <font color="#009999">1</font>, y, path) || getPathRecursion(x, y - <font color="#009999">1</font>, path)) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point p = <font color="#0000aa">new</font> Point(x, y);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path.<font color="#1e90ff">add</font>(p);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#0000aa">true</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#0000aa">false</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">boolean</font> <font color="#00aa00">getPathDP</font>(<font color="#00aaaa">int</font> x, <font color="#00aaaa">int</font> y, ArrayList&lt;Point&gt; path, HashMap&lt;Point, Boolean&gt; buffer) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (x &lt; <font color="#009999">0</font> || y &lt; <font color="#009999">0</font> || !isFree(x, y))<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#0000aa">false</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point p = <font color="#0000aa">new</font> Point(x, y);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (buffer.<font color="#1e90ff">containsKey</font>(p))<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> buffer.<font color="#1e90ff">get</font>(p);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">boolean</font> reachedOrigin = (x == <font color="#009999">0</font> &amp;&amp; y == <font color="#009999">0</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">boolean</font> success = <font color="#0000aa">false</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (reachedOrigin || getPathRecursion(x - <font color="#009999">1</font>, y, path) || getPathRecursion(x, y - <font color="#009999">1</font>, path)) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path.<font color="#1e90ff">add</font>(p);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success = <font color="#0000aa">true</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer.<font color="#1e90ff">put</font>(p, success);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> success;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">boolean</font> <font color="#00aa00">isFree</font>(<font color="#00aaaa">int</font> x, <font color="#00aaaa">int</font> y) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> maze[x][y] == <font color="#009999">0</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">printMatrix</font>(<font color="#00aaaa">int</font>[][] matrix) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">for</font> (<font color="#00aaaa">int</font>[] row : matrix) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(Arrays.<font color="#1e90ff">toString</font>(row));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">static</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">Point</font> {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> x, y;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#00aa00">Point</font>(<font color="#00aaaa">int</font> x, <font color="#00aaaa">int</font> y) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">this</font>.<font color="#1e90ff">x</font> = x;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">this</font>.<font color="#1e90ff">y</font> = y;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#888888">@Override</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> String <font color="#00aa00">toString</font>() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#aa5500">&quot;(&quot;</font> + x + <font color="#aa5500">&quot;, &quot;</font> + y + <font color="#aa5500">&quot;)&quot;</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/>