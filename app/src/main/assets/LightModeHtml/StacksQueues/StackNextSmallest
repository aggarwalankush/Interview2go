<font color="#0000aa">package</font> StacksQueues;<br/><br/><font color="#0000aa">import</font> <font color="#00aaaa; text-decoration: underline">java.util.Arrays</font>;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Given&nbsp;&nbsp;an&nbsp;&nbsp;array,&nbsp;&nbsp;print&nbsp;&nbsp;the&nbsp;&nbsp;Next&nbsp;&nbsp;Smallest&nbsp;&nbsp;Element&nbsp;&nbsp;for&nbsp;&nbsp;every&nbsp;&nbsp;element.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;The&nbsp;&nbsp;Next&nbsp;&nbsp;smallest&nbsp;&nbsp;Element&nbsp;&nbsp;for&nbsp;&nbsp;an&nbsp;&nbsp;element&nbsp;&nbsp;x&nbsp;&nbsp;is&nbsp;&nbsp;the&nbsp;&nbsp;first&nbsp;&nbsp;smallest&nbsp;&nbsp;element&nbsp;&nbsp;on&nbsp;&nbsp;the&nbsp;&nbsp;right&nbsp;&nbsp;side&nbsp;&nbsp;of&nbsp;&nbsp;x&nbsp;&nbsp;in&nbsp;&nbsp;array.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Elements&nbsp;&nbsp;for&nbsp;&nbsp;which&nbsp;&nbsp;no&nbsp;&nbsp;smallest&nbsp;&nbsp;element&nbsp;&nbsp;exist,&nbsp;&nbsp;consider&nbsp;&nbsp;next&nbsp;&nbsp;smallest&nbsp;&nbsp;element&nbsp;&nbsp;as&nbsp;&nbsp;-1.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">StackNextSmallest</font> {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font>[] array = {<font color="#009999">5</font>, <font color="#009999">8</font>, <font color="#009999">4</font>, <font color="#009999">1</font>, <font color="#009999">6</font>};<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Input Array: &quot;</font> + Arrays.<font color="#1e90ff">toString</font>(array));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Next Smallest Array: &quot;</font> + Arrays.<font color="#1e90ff">toString</font>(printNextSmallest(array)));<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;Time&nbsp;&nbsp;Complexity:&nbsp;&nbsp;O(N)</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">private</font> <font color="#0000aa">static</font> <font color="#00aaaa">int</font>[] <font color="#00aa00">printNextSmallest</font>(<font color="#00aaaa">int</font>[] array) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stack&lt;Integer&gt; stack = <font color="#0000aa">new</font> Stack&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font>[] result = <font color="#0000aa">new</font> <font color="#00aaaa">int</font>[array.<font color="#1e90ff">length</font>];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">for</font> (<font color="#00aaaa">int</font> i = <font color="#009999">0</font>; i &lt; array.<font color="#1e90ff">length</font>; i++) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">while</font> (!stack.<font color="#1e90ff">isEmpty</font>() &amp;&amp; array[stack.<font color="#1e90ff">peek</font>()] &gt; array[i])<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[stack.<font color="#1e90ff">pop</font>()] = array[i];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack.<font color="#1e90ff">push</font>(i);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">while</font> (!stack.<font color="#1e90ff">isEmpty</font>())<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[stack.<font color="#1e90ff">pop</font>()] = -<font color="#009999">1</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> result;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/>