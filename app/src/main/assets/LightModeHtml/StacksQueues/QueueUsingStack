<font color="#0000aa">package</font> StacksQueues;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Implement&nbsp;&nbsp;Queue&nbsp;&nbsp;using&nbsp;&nbsp;2&nbsp;&nbsp;stacks</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">QueueUsingStack</font> {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyQueue&lt;Integer&gt; queue = <font color="#0000aa">new</font> MyQueue&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.<font color="#1e90ff">enqueue</font>(<font color="#009999">10</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.<font color="#1e90ff">enqueue</font>(<font color="#009999">20</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.<font color="#1e90ff">enqueue</font>(<font color="#009999">30</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> size = queue.<font color="#1e90ff">size</font>();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">for</font> (<font color="#00aaaa">int</font> i = <font color="#009999">0</font>; i &lt; size; i++)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(queue.<font color="#1e90ff">dequeue</font>());<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/><br/><font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">MyQueue</font>&lt;K&gt; {<br/>&nbsp;&nbsp;&nbsp;&nbsp;Stack&lt;K&gt; stackOld, stackNew;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#00aa00">MyQueue</font>() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stackNew = <font color="#0000aa">new</font> Stack&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stackOld = <font color="#0000aa">new</font> Stack&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#00aaaa">int</font> <font color="#00aa00">size</font>() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> stackNew.<font color="#1e90ff">size</font>() + stackOld.<font color="#1e90ff">size</font>();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#00aaaa">void</font> <font color="#00aa00">enqueue</font>(K data) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stackNew.<font color="#1e90ff">push</font>(data);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> K <font color="#00aa00">dequeue</font>() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiftStacks();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> stackOld.<font color="#1e90ff">pop</font>();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">private</font> <font color="#00aaaa">void</font> <font color="#00aa00">shiftStacks</font>() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (stackOld.<font color="#1e90ff">isEmpty</font>()) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">while</font> (!stackNew.<font color="#1e90ff">isEmpty</font>())<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stackOld.<font color="#1e90ff">push</font>(stackNew.<font color="#1e90ff">pop</font>());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/>