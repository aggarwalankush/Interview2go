<font color="#0000aa">package</font> StacksQueues;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Solve&nbsp;&nbsp;Tower&nbsp;&nbsp;of&nbsp;&nbsp;Hanoi&nbsp;&nbsp;using&nbsp;&nbsp;Stacks</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">StackTowerOfHanoi</font> {<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> n = <font color="#009999">3</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tower[] towers = <font color="#0000aa">new</font> Tower[<font color="#009999">3</font>];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">for</font> (<font color="#00aaaa">int</font> i = <font color="#009999">0</font>; i &lt; <font color="#009999">3</font>; i++)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;towers[i] = <font color="#0000aa">new</font> Tower(i);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">for</font> (<font color="#00aaaa">int</font> i = n - <font color="#009999">1</font>; i &gt;= <font color="#009999">0</font>; i--)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;towers[<font color="#009999">0</font>].<font color="#1e90ff">add</font>(i);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;towers[<font color="#009999">0</font>].<font color="#1e90ff">moveDisks</font>(n, towers[<font color="#009999">2</font>], towers[<font color="#009999">1</font>]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/><br/><font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">Tower</font> {<br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">private</font> Stack&lt;Integer&gt; disks;<br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">private</font> <font color="#00aaaa">int</font> index;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#00aa00">Tower</font>(<font color="#00aaaa">int</font> index) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">this</font>.<font color="#1e90ff">index</font> = index;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disks = <font color="#0000aa">new</font> Stack&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#00aaaa">int</font> <font color="#00aa00">getIndex</font>() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> index;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#00aaaa">void</font> <font color="#00aa00">add</font>(<font color="#00aaaa">int</font> disk) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (!disks.<font color="#1e90ff">isEmpty</font>() &amp;&amp; disks.<font color="#1e90ff">peek</font>() &lt;= disk)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Error placing disk &quot;</font> + disk);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">else</font><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disks.<font color="#1e90ff">push</font>(disk);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#00aaaa">void</font> <font color="#00aa00">moveTopTo</font>(Tower tower) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> top = disks.<font color="#1e90ff">pop</font>();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tower.<font color="#1e90ff">add</font>(top);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Move disk &quot;</font> + top + <font color="#aa5500">&quot; from tower &quot;</font> + getIndex() + <font color="#aa5500">&quot; to &quot;</font> + tower.<font color="#1e90ff">getIndex</font>());<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#00aaaa">void</font> <font color="#00aa00">moveDisks</font>(<font color="#00aaaa">int</font> n, Tower destination, Tower buffer) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (n &lt;= <font color="#009999">0</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveDisks(n - <font color="#009999">1</font>, buffer, destination);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveTopTo(destination);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer.<font color="#1e90ff">moveDisks</font>(n - <font color="#009999">1</font>, destination, <font color="#0000aa">this</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/>