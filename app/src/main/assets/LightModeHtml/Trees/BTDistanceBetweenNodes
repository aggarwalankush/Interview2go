<font color="#0000aa">package</font> Trees;<br/><br/><font color="#0000aa">import</font> <font color="#00aaaa; text-decoration: underline">java.util.ArrayList</font>;<br/><font color="#aaaaaa; font-style: italic">//@formatter:off</font><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Given&nbsp;&nbsp;a&nbsp;&nbsp;binary&nbsp;&nbsp;tree,&nbsp;&nbsp;find&nbsp;&nbsp;the&nbsp;&nbsp;distance&nbsp;&nbsp;between&nbsp;&nbsp;2&nbsp;&nbsp;given&nbsp;&nbsp;nodes.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Dist(n1,&nbsp;&nbsp;n2)&nbsp;&nbsp;=&nbsp;&nbsp;Dist(root,&nbsp;&nbsp;n1)&nbsp;&nbsp;+&nbsp;&nbsp;Dist(root,&nbsp;&nbsp;n2)&nbsp;&nbsp;-&nbsp;&nbsp;2*Dist(root,&nbsp;&nbsp;lca)</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#aaaaaa; font-style: italic">//@formatter:on</font><br/><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">BTDistanceBetweenNodes</font> {<br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode root = TreeUtils.<font color="#1e90ff">createBinaryTree</font>(<font color="#009999">10</font>, <font color="#009999">17</font>, <font color="#009999">1</font>, <font color="#009999">3</font>, <font color="#009999">9</font>, <font color="#0000aa">null</font>, <font color="#009999">16</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode node1 = TreeUtils.<font color="#1e90ff">findBinaryTree</font>(root, <font color="#009999">9</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode node2 = TreeUtils.<font color="#1e90ff">findBinaryTree</font>(root, <font color="#009999">1</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Distance between &quot;</font> + node1 + <font color="#aa5500">&quot; and &quot;</font> + node2 + <font color="#aa5500">&quot;: &quot;</font> + findDistance(root, node1, node2));<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">int</font> <font color="#00aa00">findDistance</font>(TreeNode root, TreeNode node1, TreeNode node2) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;TreeNode&gt; path1 = <font color="#0000aa">new</font> ArrayList&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;TreeNode&gt; path2 = <font color="#0000aa">new</font> ArrayList&lt;&gt;();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">boolean</font> foundNode1 = findPath(root, node1, path1);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">boolean</font> foundNode2 = findPath(root, node2, path2);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (!foundNode1 || !foundNode2)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> -<font color="#009999">1</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> index;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">for</font> (index = <font color="#009999">0</font>; index &lt; path1.<font color="#1e90ff">size</font>(); index++) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (path1.<font color="#1e90ff">get</font>(index) != path2.<font color="#1e90ff">get</font>(index))<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">break</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> path1.<font color="#1e90ff">size</font>() + path2.<font color="#1e90ff">size</font>() - <font color="#009999">2</font> * index;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">private</font> <font color="#0000aa">static</font> <font color="#00aaaa">boolean</font> <font color="#00aa00">findPath</font>(TreeNode root, TreeNode node, ArrayList&lt;TreeNode&gt; path) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (root == <font color="#0000aa">null</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#0000aa">false</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path.<font color="#1e90ff">add</font>(root);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (root.<font color="#1e90ff">data</font> == node.<font color="#1e90ff">data</font>)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#0000aa">true</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (findPath(root.<font color="#1e90ff">left</font>, node, path) || findPath(root.<font color="#1e90ff">right</font>, node, path))<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#0000aa">true</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path.<font color="#1e90ff">remove</font>(root);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#0000aa">false</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>}<br/>