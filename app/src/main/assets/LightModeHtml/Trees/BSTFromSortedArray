<font color="#0000aa">package</font> Trees;<br/><br/><font color="#aaaaaa; font-style: italic">/**</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Given&nbsp;&nbsp;a&nbsp;&nbsp;sorted&nbsp;&nbsp;(increasing&nbsp;&nbsp;order)&nbsp;&nbsp;array&nbsp;&nbsp;with&nbsp;&nbsp;unique&nbsp;&nbsp;integer&nbsp;&nbsp;elements,</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*&nbsp;&nbsp;Generate&nbsp;&nbsp;a&nbsp;&nbsp;binary&nbsp;&nbsp;search&nbsp;&nbsp;tree&nbsp;&nbsp;with&nbsp;&nbsp;minimal&nbsp;&nbsp;height.</font><br/><font color="#aaaaaa; font-style: italic">&nbsp;&nbsp;*/</font><br/><font color="#0000aa">public</font> <font color="#0000aa">class</font> <font color="#00aa00; text-decoration: underline">BSTFromSortedArray</font> {<br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> <font color="#00aaaa">void</font> <font color="#00aa00">main</font>(String[] args) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font>[] array = {<font color="#009999">1</font>, <font color="#009999">2</font>, <font color="#009999">3</font>, <font color="#009999">4</font>, <font color="#009999">5</font>};<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<font color="#1e90ff">out</font>.<font color="#1e90ff">println</font>(<font color="#aa5500">&quot;Tree generated with root: &quot;</font> + arrayToBST(array));<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">public</font> <font color="#0000aa">static</font> TreeNode <font color="#00aa00">arrayToBST</font>(<font color="#00aaaa">int</font>[] array) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#00aa00">arrayToBST</font>(array, <font color="#009999">0</font>, array.<font color="#1e90ff">length</font> - <font color="#009999">1</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">private</font> <font color="#0000aa">static</font> TreeNode <font color="#00aa00">arrayToBST</font>(<font color="#00aaaa">int</font>[] array, <font color="#00aaaa">int</font> low, <font color="#00aaaa">int</font> high) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">if</font> (low &gt; high)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> <font color="#0000aa">null</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00aaaa">int</font> mid = low + (high - low) / <font color="#009999">2</font>;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode root = <font color="#0000aa">new</font> TreeNode(array[mid]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root.<font color="#1e90ff">left</font> = arrayToBST(array, low, mid - <font color="#009999">1</font>);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root.<font color="#1e90ff">right</font> = arrayToBST(array, mid + <font color="#009999">1</font>, high);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000aa">return</font> root;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>}<br/>