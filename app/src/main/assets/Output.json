{"Arrays":"{\"CountDifferencePair\":\"Number of Pairs of difference equals K:\\nInput: [7, 3, 5, 9, 1, 6, 4], K = 2\\nPair count: 3\\n\",\"ElementAppearedOnce\":\"Input Array: [1, 1, 1, 6, 5, 6, 6]\\nElement Appeared Once -> 5\\n\",\"EquilibriumIndex\":\"Input Array: [7, 1, 3, 1, 1, 6, 4]\\nEquilibrium -> Index: 3, Element: 1\\n\",\"EvenOdd\":\"Input Array: [2, 5, 7, 8, 1, 6, 9, 1, 6]\\nRearranged Array: [2, 5, 8, 7, 6, 1, 9, 1, 6]\\n\",\"MajorityElement\":\"Input Array: [10, 9, 5, 2, 5, 5, 5]\\nMajority Element: 5\\n\",\"MaxElementDifference\":\"Input Array: [10, 9, 5, 6, 8, 11, 10]\\nMax Difference: 6\\n\\nInput Array: [10, 9, 8, 7, 6]\\nMax difference: -1\\n\",\"MaxHistogramArea\":\"Input Array: [10, 9, 5, 6, 8, 11, 10]\\nMax Difference: 35\\n\",\"MaxIndexDifference\":\"Input Array: [10, 9, 5, 6, 8, 11, 10]\\nMax Difference indexes -> j: 6, i: 1, and diff: 5\\n\\nInput Array: [10, 9, 8, 7, 6]\\nMax Difference indexes -> j: 3, i: 4, and diff: -1\\n\",\"MaxInSlidingWindow\":\"Input Array: [7, 3, 2, 4, 1, 6, 4]\\nFor window size 3, max for each window:\\n[7, 3, 2] -> 7\\n[3, 2, 4] -> 4\\n[2, 4, 1] -> 4\\n[4, 1, 6] -> 6\\n[1, 6, 4] -> 6\\n\",\"MaxSubarraySum\":\"Maximum contiguous subarray sum:\\n[7, -3, 5, -9, 1, 6, -4] -> 9\\n[-7, -3, -2, -9, -1, -6, -4] -> -1\\n\",\"MinDifferenceSplitArray\":\"Input Array: [7, 3, 2, 6, 1, 6, 4]\\nMinimum Difference in two subarrays: 1\\n\",\"MinLenUnsortedSubarray\":\"Input Array: [1, 4, 6, 7, 5, 9, 4, 12]\\nIndexes : 2, 6 and Unsorted subarray: [6, 7, 5, 9, 4]\\n\\nInput Array: [1, 2, 3, 4, 5, 6]\\nArray already sorted\\n\",\"PeakElement\":\"Input Array: [10, 9, 5, 6, 8, 11, 10]\\nPeak Index: 5 and Element: 11\\n\",\"RotatedArraySearch\":\"Search in Rotated Array:\\nInput: [5, 5, 6, 7, 1, 2, 3, 4], K = 7 -> Found at index 3\\n\",\"RowColumnZero\":\"Input Array:\\n[1, 1, 1, 1]\\n[1, 1, 1, 0]\\n[1, 0, 1, 1]\\n[1, 1, 1, 1]\\nProcessed Array:\\n[1, 0, 1, 0]\\n[0, 0, 0, 0]\\n[0, 0, 0, 0]\\n[1, 0, 1, 0]\\n\",\"SortByFrequency\":\"Input Array: [3, 3, 1, 1, 1, 5, 5, 5, 5, 5, 3, 6, 6]\\nSorted By Frequency: [6, 6, 3, 3, 3, 1, 1, 1, 5, 5, 5, 5, 5]\\n\",\"SubarraySumK\":\"Subarray sum equals K:\\nInput: [7, 3, 5, 9, 1, 6, 4], K = 16\\nIndex: (3, 5) and subarray -> [9, 1, 6]\\n\",\"SumPair\":\"Pair of sum equals K:\\nInput: [7, 3, 5, 9, 1, 6, 4], K = 15\\nIndex: (3, 5) and Pair: (9, 6)\\n\"}","BitwiseAndMath":"{\"BitsToConvertAIntoB\":\"A: 101000\\nB: 110110\\nBits to convert A into B -> 4\\n\",\"DoubleToBinary\":\"Decimal Number to binary\\n0.625 -> 0.101\\n\",\"ImplementMulSubDiv\":\"A:15, B:4\\nA-B: 11\\nA*B: 60\\nA/B: 3\\n\",\"InsertAIntoB\":\"A: 1101\\nB: 1000000\\nInsertion Index: (4, 1)\\nInserted A into B: 1011010\\n\"}","DarkModeHtml":"{}","Graphs":"{\"Graph\":\"This is a helper class to be used by other programs.\\n\",\"GraphBFS\":\"Is there any path between d and f: true\\n\",\"GraphNode\":\"This is a helper class to be used by other programs.\\n\"}","LightModeHtml":"{}","LinkedLists":"{\"AddTwoNumbers\":\"Number 1: 1->9->5\\nNumber 2: 8->4->7\\nSum: 9->3->3->1\\n\",\"DeleteNode\":\"Input LinkedList: 10->9->7->11\\nAfter deletion of 3rd node: 10->9->11\\n\",\"DuplicateRemove\":\"Input LinkedList1: 10->9->10->4->7\\nAfter Removing Duplicates: 10->9->4->7\\nInput LinkedList2: 10->9->4->7->10\\nAfter Removing Duplicates: 10->9->4->7\\n\",\"KthFromLast\":\"Input LinkedList: 10->9->5->4->7\\n3rd element from last: 5\\n\",\"LoopStart\":\"Input LinkedList: 10->9->(7)->11->4->goes back to (7)\\nStart of Loop: 7\\n\",\"Merge\":\"LinkedList 1: 1->4->9\\nLinkedList 2: 5->7->10\\nMerged LinkedList: 1->4->5->7->9->10\\n\",\"MiddleNode\":\"Input LinkedList: 1->2->3->4->5\\nMiddle element: 3\\n\",\"Node\":\"This is a helper class to be used by other programs.\\n\",\"Palindrome\":\"Input LinkedList: 1->2->3->2->1\\nIs LinkedList Palindrome: true\\n\",\"Partition\":\"Input LinkedList: 10->9->5->4->7\\nPartitioned around element 5: 4->7->5->9->10\\n\",\"Reverse\":\"Input LinkedList: 1->2->3->4->5\\nReverse LinkedList: 5->4->3->2->1\\n\",\"ReverseKNodes\":\"Input LinkedList: 1->2->3->4->5\\nReverse every K=3 nodes: 3->2->1->5->4\\n\"}","RecursionDP":"{\"ArrayFindIndexSameAsValue\":\"Input Array with no duplicates: [-2, 0, 1, 3, 4, 5, 7]\\nSpecial Index and Value: 3\\nInput Array with duplicates: [1, 2, 2, 4, 5, 5, 7]\\nSpecial Index and Value: 2\\n\",\"CoinDenomination_aka_KnapSackWithRepetition\":\"Input coin values : [1, 2, 3]\\nWays to change 4 cents : 4\\n\",\"LongestCommonSubsequence\":\"Input String 1 : ACBDEGCEDGB\\nInput String 2 : BEGCFEUBK\\nLongest common subsequence : BEGCEB\\n\",\"LongestCommonSubstring\":\"Input String 1 : ABABC\\nInput String 2 : ABCBA\\nLongest common substring : ABC\\n\",\"LongestIncreasingSubsequence\":\"Input Array : [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\\nLIS : 0 4 6 9 13 15 \\n\",\"MakeChangeWays\":\"Number of ways to represent 100 cents: 242\\n\",\"MoveRobot\":\"Input Maze:\\n[0, 0, 1, 1]\\n[0, 0, 0, 0]\\n[1, 0, 1, 0]\\n[0, 0, 0, 0]\\nRobot Path: [(0, 0), (0, 1), (1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]\\n\",\"NQueens\":\"Ways to arrange 4 queens: \\n[1, 3, 0, 2]\\n[2, 0, 3, 1]\\n\",\"Permutation\":\"Input String: abc\\nPermutation: [abc, acb, bac, bca, cab, cba]\\n\",\"PowerSet\":\"Input set: [a, b, c]\\nPower set:[[], [c], [b], [c, b], [a], [c, a], [b, a], [c, b, a]]\\n\",\"StairsCountWays\":\"Possible ways to climb 2 stairs: 4\\nPossible ways to climb 5 stairs: 13\\n\",\"SubsetSum_aka_KnapSackWithoutRepetition\":\"Input Array : [8, 3, 5, 11, 4, 9]\\nIs Subset of sum 7 exists? true\\n\",\"ValidParentheses\":\"Valid Parentheses for N=3: [((())), (()()), (())(), ()(()), ()()()]\\n\"}","Sorting":"{\"BubbleSort\":\"Input array : [7, 3, 5, 9, 1, 6, 4]\\nSorted array : [1, 3, 4, 5, 6, 7, 9]\\n\",\"InsertionSort\":\"Input array : [7, 3, 5, 9, 1, 6, 4]\\nSorted array : [1, 3, 4, 5, 6, 7, 9]\\n\",\"MergeSort\":\"Input array : [7, 3, 5, 9, 1, 6, 4]\\nSorted array : [1, 3, 4, 5, 6, 7, 9]\\n\",\"QuickSort\":\"Input array : [7, 3, 5, 9, 1, 6, 4]\\nSorted array : [1, 3, 4, 5, 6, 7, 9]\\n\",\"SelectionSort\":\"Input array : [7, 3, 5, 9, 1, 6, 4]\\nSorted array : [1, 3, 4, 5, 6, 7, 9]\\n\"}","StacksQueues":"{\"Node\":\"This is a helper class to be used by other programs.\\n\",\"Queue\":\"This is a helper class to be used by other programs.\\n\",\"QueueUsingStack\":\"10\\n20\\n30\\n\",\"Stack\":\"This is a helper class to be used by other programs.\\n\",\"StackMinMax\":\"Input Stack: (Top to Bottom) 6->4->1->8->10\\nMin: 1\\nMax: 10\\n\",\"StackNextSmallest\":\"Input Array: [5, 8, 4, 1, 6]\\nNext Smallest Array: [4, 4, 1, -1, -1]\\n\",\"StackSort\":\"Input Stack: (Top to Bottom) 6->4->1->8->10\\nSorted Stack: (Top to Bottom) 10->8->6->4->1\\n\",\"StackTowerOfHanoi\":\"Move disk 0 from tower 0 to 2\\nMove disk 1 from tower 0 to 1\\nMove disk 0 from tower 2 to 1\\nMove disk 2 from tower 0 to 2\\nMove disk 0 from tower 1 to 0\\nMove disk 1 from tower 1 to 2\\nMove disk 0 from tower 0 to 2\\n\"}","Strings":"{\"LongestPalindromicSubString\":\"Longest Palindromic SubString of a String: \\nbanana -> anana\\njavabeancoffeebean -> ava\\n\",\"LongestRepeatedSubString\":\"Longest Repeated SubString of a String: \\nbanana -> ana\\njavabeancoffeebean -> bean\\n\",\"MinimumWindowSubString\":\"Minimum window in Source having all elements of Target: \\nbanana and nba -> ban\\naprilfool and roof -> rilfoo\\n\",\"ReverseString\":\"Reverse a String: \\nball -> llab\\nracket -> tekcar\\nball -> llab\\nracket -> tekcar\\n\",\"RunLengthEncoding\":\"Compress the string:\\naabbbbcffff -> a2b4c1f4\\ncrazy -> crazy\\n\",\"UniqueCharacterString\":\"Check Unique characters in String:\\nball -> false\\nracket -> true\\n\",\"ValidPermutation\":\"Valid Permutaiton:\\nball and labl -> true\\nracket and traced -> false\\nball and labl -> true\\nracket and traced -> false\\n\",\"ValidRotationString\":\"Valid Rotation of String:\\nballvolley is rotation of volleyball -> true\\nJAVA is rotation of AAVJ -> false\\n\"}","Trees":"{\"BSTFromPreorder\":\"BST created: [[10], [7, 13], [3, 9, 11, 16]]\\n\",\"BSTFromSortedArray\":\"Tree generated with root: 3\\n\",\"BSTMedian\":\"Median of given BST: 9.5\\n\",\"BSTNextNode\":\"Next Node of 10: 11\\nNext Node of 16: null\\nNext Node of 7: 9\\n\",\"BSTReplaceNodeByGreaterSum\":\"[[39], [55, 29], [58, 48, 40, 16]]\\n\",\"BSTSumK\":\"Pair of sum = 16: (3, 13)\\n\",\"BSTSwapNodes\":\"Initial BST: [[10], [7, 13], [3, 9, 11, 16]]\\nSwapped BST: [[10], [7, 9], [3, 13, 11, 16]]\\nCorrected BST: [[10], [7, 13], [3, 9, 11, 16]]\\n\",\"BSTValid\":\"Is valid BST: true\\n\",\"BTAncestor\":\"First common ancestor of 10 and 16: 10\\nFirst common ancestor of 3 and 9: 17\\n\",\"BTAncestorOptimized\":\"First common ancestor of 10 and 16: 10\\nFirst common ancestor of 3 and 9: 17\\n\",\"BTBalanced\":\"Is binary tree balanced: true\\n\",\"BTDistanceBetweenNodes\":\"Distance between 9 and 1: 3\\n\",\"BTInorderWithStack\":\"Inorder of Binary Tree: [3, 17, 9, 10, 13, 16]\\n\",\"BTNodeDistanceKFromLeaf\":\"Nodes at distance K = 0 from leaf are [3, 9, 16]\\nNodes at distance K = 1 from leaf are [17, 1]\\nNodes at distance K = 2 from leaf are [10]\\n\",\"BTNodesDistanceK\":\"Nodes at distance 2 from node 17: [4, 14, 1]\\n\",\"BTPathSumK\":\"All paths with Sum = 17 are [[17], [1, 16]]\\n\",\"BTRightSibling\":\"Right Sibling of 10: null\\nRight Sibling of 17: 13\\nRight Sibling of 13: null\\nRight Sibling of 3: 9\\nRight Sibling of 9: 16\\nRight Sibling of 16: null\\n\",\"BTSubtree\":\"Is T2 subtree of T1: true\\n\",\"BTtoBST\":\"Root of BST is 9\\n\",\"BTtoLinkedList\":\"List of LinkedLists: [[10], [17, 1], [3, 9, 16]]\\n\",\"TreeNode\":\"This is a helper class to be used by other programs.\\n\",\"TreeUtils\":\"This is a helper class to be used by other programs.\\n\"}","XBonus":"{\"CountIslands\":\"Number of Islands : 2\\n\",\"LRUCache\":\"This is a helper class to be used by other programs.\\n\",\"MaxWaterContainer\":\"Input heights : [2, 4, 6, 4, 5, 4, 7, 4]\\nMax Area : 24\\n\",\"PhoneLetterCombination\":\"Input digits : 23\\nLetter combinations : [ad, ae, af, bd, be, bf, cd, ce, cf]\\n\",\"Search2DMatrix\":\"Input Matrix : [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]\\nTarget 16 exists : true\\n\",\"Trie\":\"This is a helper class to be used by other programs.\\n\",\"WordLadder\":\"Begin Word : hit\\nEnd Word : cog\\nDictionary : [hot, dot, dog, lot, log]\\nLadder Length : 5\\n\"}"}